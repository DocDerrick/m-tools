// A collection a useful tools for building Microsoft Power BI queries.
//
// Author: Kim Burgess <kim@acaprojects.com>
// Repo:   https://github.com/acaprojects/m-tools

let

// Internal util functions.

    /**
     * Right-to-left composition of unary functions.
     *
     * :: (b -> c) (a -> b) -> a -> c
     */
    _Compose = (f, g) => (x) => f(g(x)),

    /**
     * Left-to-right composition unary functions.
     *
     * :: (a -> b) (b -> c) -> a -> c
     */
    _Pipe = (f, g) => (x) => g(f(x)),

    /**
     * Generic expander for applying the internal table column expansion
     * functions in a composable way.
     *
     * :: Table a => Table.ExpandXColumn -> string [string] -> a -> a
     */
    _ExpandColumn = (fn) => (col, xs) => (t) => fn(t, col, xs, List.Transform(xs, each col & "." & _))

in [

// ---
// Function composition

    /**
     * Function which always returns it's input.
     *
     * :: a -> a
     */
    Identity = (a) => a,

    /**
     * Return a function which always returns a given value.
     *
     * a -> (* -> a)
     */
    Const = (a) => (x) => a,

    /**
     * Perform a right-to-left composition across a list of functions.
     *
     * :: ((y -> z), (x -> y), ..., (a -> b)) -> a -> z
     */
    Compose = Reduce(_Compose, Identity),

    /**
     * Perform a left-to-right composition across a list of functions.
     *
     * :: ((a -> b), (b -> c), ..., (y -> z)) -> a -> z
     */
    Pipe = Reduce(_Pipe, Identity),

// ---
// Table transforms

    /**
     * Select a specific set of columns from a table of data and optionally
     * rename them.
     *
     * :: Table a => [string] [string] -> a -> a
     */
    SelectColumns = (columns, optional labels) => (table) => Table.SelectColumns(table, columns, labels),

    /**
     * Flatten the fields from a record column into additional columns.
     *
     * :: Table a => string [string] -> a -> a
     */
    ExpandRecordColumn = _ExpandColumn(Table.ExpandRecordColumn),

    /**
     * Flatten the fields from a table column into additional columns and rows.
     *
     * :: Table a => string [string] -> a -> a
     */
    ExpandTableColumn = _ExpandColumn(Table.ExpandTableColumn),

    /**
     * Flatten the fields from a list column into additional rows.
     *
     * :: Table a => string [string] -> a -> a
     */
    ExpandListColumn = (col) => (table) => Table.ExpandListColumn(table, col),

    /**
     * Append a columns to a table. The generator function (fn) will be invoked
     * for each row with a record type containing other column values.
     *
     * :: Table a, Record b => string (b -> c) type -> a -> a
     */
    AddColumn = (name, fn, optional dataType) => (table) => Table.AddColumn(table, name, fn, dataType),

    /**
     * Tranform the data type of a table column.
     *
     * :: Table a, Type b => string b -> a -> a
     */
    TranformColumnType = (col, dataType) => (table) => Table.TransformColumnTypes(table, {{col, dataType}}),

    /**
     * Reorder columns across a table.
     *
     * :: Table a => [string] -> a -> a
     */
    ReorderColumns = (cols) => (table) => Table.ReorderColumns(table, cols),

// ---
// List operations

    /**
     * Fold over a list to produce a single item. The reducer function receives
     * two values: (acc, value).
     *
     * :: ((a, b) -> a) a -> [b] -> a
     */
    Reduce = (fn, acc) => (list) => List.Accumulate(list, acc, fn),

    /**
     * Apply a transform to all elements of a list.
     *
     * (a -> b) -> [a] -> [b]
     */
    Map = (fn) => (list) => List.Transform(list, fn),

    /**
     * Evaluate elements of a list against a predicate, returning a new list
     * of the items which evaluated to true.
     *
     * :: (a -> Boolean) -> [a] -> [a]
     */
    Filter = (fn) => (list) => List.Select(list, fn)

]
